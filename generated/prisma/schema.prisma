generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String
  username String  @unique

  TripMember TripMember[]

  isActive Boolean @default(true)

  sentFriendRequests     Friendship[] @relation("userFriendships")
  receivedFriendRequests Friendship[] @relation("friendUserFriendships")
  comments               Comment[]

  @@index([email])
  @@index([username])
}

enum MemberRole {
  ADMIN
  CREATOR
  MEMBER
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum TripVisibility {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
}

model Friendship {
  id        Int          @id @default(autoincrement())
  userId    Int
  friendId  Int
  createdAt DateTime     @default(now())
  status    FriendStatus @default(PENDING)

  user   User @relation("userFriendships", fields: [userId], references: [id])
  friend User @relation("friendUserFriendships", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model Trip {
  steps       Step[]
  id          Int            @id @default(autoincrement())
  name        String
  coverPhoto  String?
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  visibility  TripVisibility @default(PRIVATE)
  likes       Int            @default(0)
  TripMember  TripMember[]
}

model TripMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  tripId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role MemberRole @default(MEMBER)

  user         User   @relation(fields: [userId], references: [id])
  trip         Trip   @relation(fields: [tripId], references: [id])
  createdSteps Step[]

  @@unique([userId, tripId])
}

model Step {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  startDateTime DateTime
  endDateTime   DateTime
  latitude      Float
  longitude     Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Int

  Trip   Trip @relation(fields: [tripId], references: [id])
  tripId Int

  creator   TripMember @relation(fields: [creatorId], references: [id])
  creatorId Int

  comments Comment[]

  @@index([latitude, longitude])
  @@index([startDateTime, endDateTime])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isEdited  Boolean  @default(false)

  stepId Int
  step   Step @relation(fields: [stepId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}
